buildscript {
    dependencies {
        classpath libs.gradle
        classpath libs.kotlin.gradle.plugin
        classpath libs.dokka.gradle.plugin
        classpath libs.versioning.plugin
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files

        constraints {
            // Force upgrades of AGP dependencies
            classpath(libs.commonsCompress)
            classpath(libs.jose4j)
            classpath(libs.netty.handler)
            classpath(libs.netty.handler.proxy)
            classpath(libs.netty.codec.http)
            classpath(libs.netty.codec.http2)
            classpath(libs.bcprov.jdk18on)
            classpath(libs.jimfs)
            classpath(libs.grpcNetty)
            classpath(libs.guava)
        }
    }
}

plugins {
    alias(libs.plugins.nexusPublishPlugin)
    alias(libs.plugins.ktlint)
    alias(libs.plugins.detekt)
    //id 'nl.neotech.plugin.rootcoverage' version '1.6.0'
    alias(libs.plugins.dokka)
    alias(libs.plugins.androidLibrary) apply(false)
    alias(libs.plugins.androidApplication) apply(false)
    alias(libs.plugins.kotlinPluginCompose) apply(false)
    alias(libs.plugins.hilt.android) apply(false)
}
/*
rootCoverage {
    buildVariant "debug"
    excludes.addAll(
            "models/*",
    )
    generateHtml true
    generateXml true
    executeAndroidTests false
    executeUnitTests true
    includeUnitTestResults true
    includeNoLocationClasses true
}
*/
apply from: "${rootDir}/scripts/publish-root.gradle"

subprojects {
    tasks.withType(Javadoc).all { enabled = false }
    apply plugin: libs.plugins.ktlint.get().pluginId
    apply plugin: libs.plugins.detekt.get().pluginId
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    // Optionally configure plugin
    ktlint {
        android = true
        version = "1.2.1"
    }
    configurations.all {
        resolutionStrategy {
            force(libs.woodstox)
            force(libs.grpcNetty)
            force(libs.guava)
            force(libs.netty.codec.http)
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

tasks.register("runOnGitHub") {
    dependsOn(
        ":source:sdk:lint",
        ":source:sdk:ktlintCheck",
        ":source:sdk:testDebugUnitTest",
    )
    group = "custom"
    description = "\$ ./gradlew runOnGitHub # runs on GitHub Action"
}

tasks.dokkaHtmlMultiModule.configure {
    outputDirectory.set(file("$projectDir/docs"))
}

// Create variables with empty default values
ext["STYTCH_PUBLIC_TOKEN"] = ""
ext["GOOGLE_OAUTH_CLIENT_ID"] = ""
ext["STYTCH_B2B_PUBLIC_TOKEN"] = ""
ext["STYTCH_B2B_ORG_ID"] = ""
ext["UI_GOOGLE_CLIENT_ID"] = ""
ext["PASSKEYS_DOMAIN"] = ""

File localProperties = project.rootProject.file("local.properties")
if (localProperties.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(localProperties).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use envvars
    ext["STYTCH_PUBLIC_TOKEN"] = System.getenv('STYTCH_PUBLIC_TOKEN')
    ext["GOOGLE_OAUTH_CLIENT_ID"] = System.getenv('GOOGLE_OAUTH_CLIENT_ID')
    ext["STYTCH_B2B_PUBLIC_TOKEN"] = System.getenv('STYTCH_B2B_PUBLIC_TOKEN')
    ext["STYTCH_B2B_ORG_ID"] = System.getenv('STYTCH_B2B_ORG_ID')
    ext["UI_GOOGLE_CLIENT_ID"] = System.getenv('UI_GOOGLE_CLIENT_ID')
    ext["PASSKEYS_DOMAIN"] = System.getenv('PASSKEYS_DOMAIN')
}