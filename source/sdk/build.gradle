import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
    alias(libs.plugins.androidLibrary)
    id 'kotlin-android'
    alias(libs.plugins.dokka)
    id 'kotlin-parcelize'
    alias(libs.plugins.ksp)
    alias(libs.plugins.kotlinPluginCompose)
}

ext {
  PUBLISH_GROUP_ID = 'com.stytch.sdk'
  PUBLISH_VERSION = '0.27.1'
  PUBLISH_ARTIFACT_ID = 'sdk'
}

apply from: "${rootProject.projectDir}/scripts/publish-module.gradle"

android {
    compileSdk 34

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 33

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    publishing {
        singleVariant("release") {
            withSourcesJar()
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "Boolean", "DEBUG_MODE", "false"
            buildConfigField "String", "STYTCH_SDK_VERSION", "\"$PUBLISH_VERSION\""
        }
        debug {
            minifyEnabled false
            buildConfigField "Boolean", "DEBUG_MODE", "true"
            buildConfigField "String", "STYTCH_SDK_VERSION", "\"$PUBLISH_VERSION\""
            enableUnitTestCoverage true
            enableAndroidTestCoverage true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += '-Xexplicit-api=strict'
    }
    testOptions {
        unitTests {
            returnDefaultValues = true
            includeAndroidResources = true
        }
    }
    namespace 'com.stytch.sdk'
    lint {
        disable 'OldTargetApi'
    }
    buildFeatures {
        buildConfig true
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.7'
    }
    testVariants.all {
        it.mergedFlavor.manifestPlaceholders = [
            'stytchOAuthRedirectScheme': 'test://',
            'stytchOAuthRedirectHost': 'oauth',
            'STYTCH_PUBLIC_TOKEN': 'test',
        ]
    }
    unitTestVariants.all {
        it.mergedFlavor.manifestPlaceholders = [
            'stytchOAuthRedirectScheme': 'test://',
            'stytchOAuthRedirectHost': 'oauth',
            'STYTCH_PUBLIC_TOKEN': 'test',
        ]
    }
}

tasks.named("dokkaHtmlPartial").configure {
    dependsOn(tasks.named("kspDebugKotlin"))
    dependsOn(tasks.named("kspReleaseKotlin"))
    dependencies {
        dokkaPlugin(libs.versioning.plugin)
    }
    moduleName.set("Stytch Android")
    suppressInheritedMembers.set(true)
    dokkaSourceSets {
        configureEach {
            includes.from([
                "module.md",
                "src/main/java/com/stytch/sdk/b2b/README.md",
                "src/main/java/com/stytch/sdk/b2b/discovery/README.md",
                "src/main/java/com/stytch/sdk/b2b/magicLinks/README.md",
                "src/main/java/com/stytch/sdk/b2b/member/README.md",
                "src/main/java/com/stytch/sdk/b2b/oauth/README.md",
                "src/main/java/com/stytch/sdk/b2b/organization/README.md",
                "src/main/java/com/stytch/sdk/b2b/otp/README.md",
                "src/main/java/com/stytch/sdk/b2b/passwords/README.md",
                "src/main/java/com/stytch/sdk/b2b/recoveryCodes/README.md",
                "src/main/java/com/stytch/sdk/b2b/sessions/README.md",
                "src/main/java/com/stytch/sdk/b2b/sso/README.md",
                "src/main/java/com/stytch/sdk/b2b/totp/README.md",
                "src/main/java/com/stytch/sdk/common/README.md",
                "src/main/java/com/stytch/sdk/common/sso/README.md",
                "src/main/java/com/stytch/sdk/consumer/README.md",
                "src/main/java/com/stytch/sdk/consumer/biometrics/README.md",
                "src/main/java/com/stytch/sdk/consumer/crypto/README.md",
                "src/main/java/com/stytch/sdk/consumer/magicLinks/README.md",
                "src/main/java/com/stytch/sdk/consumer/oauth/README.md",
                "src/main/java/com/stytch/sdk/consumer/otp/README.md",
                "src/main/java/com/stytch/sdk/consumer/passkeys/README.md",
                "src/main/java/com/stytch/sdk/consumer/passwords/README.md",
                "src/main/java/com/stytch/sdk/consumer/sessions/README.md",
                "src/main/java/com/stytch/sdk/consumer/userManagement/README.md",
            ])
            perPackageOption {
                matchingRegex.set(".*\\.network.*")
                suppress.set(true)
            }
            reportUndocumented.set(true)
        }
        /*
        // TODO: Switch to KTS files to make this a lot easier/more idiomatic
        pluginsMapConfiguration.set([
            "org.jetbrains.dokka.versioning.VersioningPlugin" : """{
                "version": "$PUBLISH_VERSION",
                "olderVersionsDir": "$projectDir/../../docs/docs/olderVersions/sdk"
            }"""
        ])
         */
    }
}

dependencies {
    // Headless SDK dependencies
    implementation libs.kotlin.stdlib
    implementation libs.biometric.ktx
    implementation libs.browser
    implementation libs.core.ktx
    implementation libs.retrofit
    implementation libs.converter.moshi
    implementation(libs.okhttp)
    implementation libs.moshi
    ksp(libs.moshi.kotlin.codegen)
    implementation libs.kotlinx.coroutines.android
    implementation libs.tink.android
    implementation libs.bcprov.jdk18on
    implementation libs.recaptcha
    implementation libs.credentials
    implementation libs.credentials.play.services.auth
    implementation libs.googleid
    implementation libs.play.services.auth.api.phone

    // UI SDK dependencies
    implementation libs.activity.ktx
    implementation libs.lifecycle.runtime.ktx
    implementation libs.activity.compose
    implementation libs.lifecycle.viewmodel.compose
    implementation libs.voyager.transitions
    implementation libs.voyager.androidx
    implementation platform(libs.compose.bom)
    implementation libs.ui
    implementation libs.ui.graphics
    implementation libs.ui.tooling.preview
    implementation libs.material3
    implementation libs.material.icons.extended
    debugImplementation libs.ui.tooling
    implementation libs.libphonenumber

    // Test depdendencies
    testImplementation libs.junit
    testImplementation libs.mockk
    testImplementation libs.kotlinx.coroutines.test
    testImplementation(libs.json)
    androidTestImplementation libs.runner
    androidTestImplementation libs.rules
    androidTestImplementation libs.core.testing
    // Test rules and transitive dependencies:
    androidTestImplementation libs.ui.test.junit4
    // Needed for createAndroidComposeRule, but not createComposeRule:
    debugImplementation libs.ui.test.manifest

    testImplementation(libs.mockwebserver)
}

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat = TestExceptionFormat.FULL
        showStackTraces = true
    }
}

tasks.register('printVersion') {
    group = "Documentation"
    description = "Prints the version of the SDK. Used for autoreleasing the SDK from GitHub"
    doLast {
        println(PUBLISH_VERSION)
    }
}